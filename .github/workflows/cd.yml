name: CD

on:
  workflow_run:
    workflows: [ "CI" ]
    types: [ "completed" ]

permissions:
  contents: read
  packages: read
  pull-requests: write

jobs:
  mock_deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Debug workflow_run context
        shell: bash
        run: |
          echo "workflow_run.head_branch='${{ github.event.workflow_run.head_branch }}'"
          echo "workflow_run.head_sha='${{ github.event.workflow_run.head_sha }}'"
          echo "github.repository='${{ github.repository }}'"

      - name: Find PR for this SHA
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.workflow_run.head_sha;
            const branch = context.payload.workflow_run.head_branch;
            const { data } = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} type:pr is:open ${sha}`
            });
            const pr = data.items && data.items.length ? data.items[0] : null;
            core.setOutput('number', pr ? pr.number : '');
            core.setOutput('branch', branch || '');

      - name: Download image ref from CI
        uses: actions/download-artifact@v4
        with:
          name: image-ref
          path: .

      - name: Read image ref
        id: img
        run: echo "image=$(cat image.txt)" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: docker pull "${{ steps.img.outputs.image }}"

      - name: Run mock deployment
        run: docker run --rm "${{ steps.img.outputs.image }}" 2 3

      - name: Comment on PR
        if: ${{ steps.pr.outputs.number != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const number = Number('${{ steps.pr.outputs.number }}');
            const image = `${{ steps.img.outputs.image }}`;
            const body = `âœ… CD: Despliegue simulado exitoso.\n\n- Imagen: \`${image}\`\n- Comando: \`docker run ${image} 2 3\``;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: number,
              body
            });

