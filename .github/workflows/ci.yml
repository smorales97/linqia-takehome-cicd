name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage ruff

      - name: Lint (ruff)
        run: |
          ruff check . --fix
          ruff format .

      - name: Run tests with coverage
        run: pytest

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-py${{ matrix.python-version }}
          path: |
            ./.coverage
            ./coverage.xml
            ./junit.xml
          if-no-files-found: ignore

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.result == 'success' }}
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch
        id: vars
        run: echo "branch=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Build image
        run: |
          docker build -t $IMAGE_NAME:${{ steps.vars.outputs.branch }} .

      - name: Push image
        run: docker push $IMAGE_NAME:${{ steps.vars.outputs.branch }}

      - name: Write image ref
        run: echo "$IMAGE_NAME:${{ steps.vars.outputs.branch }}" > image.txt

      - name: Upload image ref
        uses: actions/upload-artifact@v4
        with:
          name: image-ref
          path: image.txt

  trivy_scan:
    name: Security scan (Trivy)
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download image ref artifact
        uses: actions/download-artifact@v4
        with:
          name: image-ref
          path: .

      - name: Read image ref
        id: img
        run: echo "image=$(cat image.txt)" >> "$GITHUB_OUTPUT"

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: ${{ steps.img.outputs.image }}
          format: table
          exit-code: "0"
          vuln-type: "os,library"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

  comment_pr:
    needs: [ test, build_and_push ]
    if: ${{ github.event_name == 'pull_request' && needs.test.result == 'success' && needs.build_and_push.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Derive image name
        id: derive
        run: |
          echo "image=ghcr.io/${{ github.repository }}:${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Parse coverage from coverage.xml (best effort)
        id: cov
        run: |
          COV=$(grep -oP 'line-rate="\K[0-9.]+(?=")' artifacts/test-artifacts-py3.12/coverage.xml || echo "n/a")
          echo "pct=$COV" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const image = `${{ steps.derive.outputs.image }}`;
            const cov = `${{ steps.cov.outputs.pct }}`;
            let body = `### CI Summary\n` +
                       `- **Image:** \`${image}\`\n` +
                       `- **Coverage (py3.12):** ${cov === 'n/a' ? 'n/a' : (Number(cov)*100).toFixed(1) + '%'}\n` +
                       `- **Artifacts:** downloaded for all matrix variants.`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
